{"version":3,"sources":["util/Spotify.js","components/SearchBar/SearchBar.js","components/Track/Track.js","components/TrackList/TrackList.js","components/SearchResults/SearchResults.js","components/PlayList/PlayList.js","components/App/App.js","serviceWorker.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","console","log","event","setState","target","value","className","placeholder","onChange","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","key","id","SearchResults","searchResults","PlayList","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","playlistName","updatePlaylistName","find","savedTrack","push","filter","currentTrack","trackURIs","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ad44fe8b.chunk.js","sourcesContent":["let accessToken;\nconst clientId = '70a7de25b31d4f309b491abdf1f92102';\nconst redirectUri = 'http://localhost:3000/jamming';\n\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken){\n      return accessToken;\n    } else {\n      // check for access token match\n      const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n      const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n      if (accessTokenMatch && expiresInMatch) {\n        accessToken = accessTokenMatch[1];\n        const expiresIn = Number(expiresInMatch[1]);\n        // This clears the parameters, allowing code to grab new access token when it expires.\n        window.setTimeout(() => accessToken = '', expiresIn * 1000);\n        window.history.pushState('Access Token', null, '/');\n        return accessToken;\n      } else {\n        const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n        window.location = accessUrl;\n      }\n    }\n  },\n\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(\n      `https://api.spotify.com/v1/search?type=track&q=${term}`,\n      {\n        headers: {\n          Authorization: `Bearer ${accessToken}`\n        }\n      })\n      .then(response => response.json())\n      .then(jsonResponse => {\n        if (!jsonResponse.tracks) {\n          return [];\n        }\n\n        return jsonResponse.tracks.items.map(track => ({\n          id: track.id,\n          name: track.name,\n          artist: track.artists[0].name,\n          album: track.album.name,\n          uri: track.uri\n        }));\n      });\n  },\n\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris.length) {\n      return;\n    }\n    const accessToken = Spotify.getAccessToken();\n    const headers = { Authorization: `Bearer ${accessToken}`};\n    let userId;\n\n    return fetch('https://api.spotify.com/v1/me', {headers: headers}\n    ).then(response => response.json()\n    ).then(jsonResponse => {\n      userId = jsonResponse.id;\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`,\n        {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({name: name})\n        }).then(response => response.json()\n      ).then(jsonResponse => {\n        const playlistId = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({uris: trackUris})\n        })\n      })\n    })\n  }\n\n};\n\nexport default Spotify;","import React from 'react';\nimport './SearchBar.css';\n\nclass SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      term: '',\n    }\n\n    this.search = this.search.bind(this);\n    this.handleTermChange = this.handleTermChange.bind(this);\n  }\n\n  search() {\n    this.props.onSearch(this.state.term);\n    console.log('test');\n  };\n\n  handleTermChange(event) {\n    this.setState({ term: event.target.value })\n  };\n\n  render() {\n    return (\n      <div className=\"SearchBar\">\n        <input\n          placeholder=\"Enter A Song, Album, or Artist\"\n          onChange={this.handleTermChange}\n        />\n        <button\n          className=\"SearchButton\"\n          onClick={this.search}\n        >\n          SEARCH\n        </button>\n      </div>\n    );\n  };\n};\n\nexport default SearchBar;\n","import React from 'react';\nimport './Track.css';\n\nclass Track extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n  };\n\n  renderAction() {\n    if (this.props.isRemoval){\n      return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>\n    } else {\n      return <button className=\"Track-action\" onClick={this.addTrack}>+</button>\n    }\n\n  };\n\n  addTrack() {\n    this.props.onAdd(this.props.track);\n  };\n\n  removeTrack() {\n    this.props.onRemove(this.props.track);\n  }\n\n  render() {\n    return (\n      <div className=\"Track\">\n        <div className=\"Track-information\">\n          <h3>{this.props.track.name}</h3>\n          <p>{this.props.track.artist} | {this.props.track.album}</p>\n        </div>\n        {this.renderAction()}\n      </div>\n    );\n  };\n};\n\nexport default Track;","import React from 'react';\nimport './TrackList.css';\nimport Track from \"../Track/Track\";\n\nclass TrackList extends React.Component {\n  render() {\n    return (\n      <div className=\"TrackList\">\n        {\n          this.props.tracks.map(track => {\n            return <Track\n              track={track}\n              key={track.id}\n              onAdd={this.props.onAdd}\n              onRemove={this.props.onRemove}\n              isRemoval={this.props.isRemoval}\n            />\n          })\n        }\n      </div>\n    );\n  }\n}\n\nexport default TrackList;","import React from 'react';\nimport TrackList from '../TrackList/TrackList';\nimport './SearchResults.css';\n\nclass SearchResults extends React.Component {\n  render(){\n    return (\n      <div className=\"SearchResults\">\n        <h2>Results</h2>\n        <TrackList\n          tracks={this.props.searchResults}\n          onAdd={this.props.onAdd}\n          isRemoval={false}\n        />\n      </div>\n    );\n  }\n}\n\nexport default SearchResults;\n","import React from 'react';\nimport TrackList from '../TrackList/TrackList';\nimport './PlayList.css';\n\nclass PlayList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleNameChange = this.handleNameChange.bind(this);\n  }\n\n  handleNameChange(event) {\n    this.props.onNameChange(event.target.value);\n  };\n\n  render() {\n    return (\n      <div className=\"Playlist\">\n        <input\n          defaultValue={'New Playlist'}\n          onChange={this.handleNameChange}\n        />\n        <TrackList\n          tracks={this.props.playlistTracks}\n          onRemove={this.props.onRemove}\n          isRemoval={true}\n        />\n        <button\n          className=\"Playlist-save\"\n          onClick={this.props.onSave}\n        >\n          SAVE TO SPOTIFY\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default PlayList;\n","import React from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport PlayList from '../PlayList/PlayList';\nimport Spotify from '../../util/Spotify';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      searchResults: [],\n      playlistName: 'My Awesome Songs',\n      playlistTracks: []\n    };\n\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  };\n\n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n    if (tracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    }\n\n    tracks.push(track);\n    this.setState({ playlistTracks: tracks });\n  };\n\n  removeTrack(track){\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n\n    this.setState({ playlistTracks: tracks });\n  };\n\n  updatePlaylistName(name) {\n    this.setState({ playlistName: name });\n  };\n\n  savePlaylist() {\n    const trackURIs = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackURIs).then(() => {\n      this.setState({\n        playlistName: 'New Playlist',\n        playlistTracks: []\n      })\n    })\n  };\n\n  search(term) {\n    Spotify.search(term).then(searchResults => {\n      this.setState({ searchResults: searchResults })\n      console.log(term);\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar\n            onSearch={this.search}\n           />\n          <div className=\"App-playlist\">\n            <SearchResults\n              searchResults={this.state.searchResults}\n              onAdd={this.addTrack}\n             />\n            <PlayList\n              playlistName={this.state.playlistName}\n              playlistTracks={this.state.playlistTracks}\n              onRemove={this.removeTrack}\n              onNameChange={this.updatePlaylistName}\n              onSave={this.savePlaylist}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  };\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}