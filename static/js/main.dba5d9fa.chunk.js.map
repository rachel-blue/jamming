{"version":3,"sources":["components/SearchBar/SearchBar.js","components/Track/Track.js","components/TrackList/TrackList.js","components/SearchResults/SearchResults.js","components/PlayList/PlayList.js","components/App/App.js","serviceWorker.js","index.js"],"names":["SearchBar","className","placeholder","Track","props","addTrack","bind","removeTrack","this","isRemoval","onClick","onAdd","track","onRemove","name","artist","album","renderAction","React","Component","TrackList","tracks","map","key","id","SearchResults","searchResults","PlayList","handleNameChange","event","onNameChange","target","value","preventDefault","defaultValue","onChange","playlistTracks","App","state","playlistName","updatePlaylistName","find","savedTrack","push","setState","filter","currentTrack","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qXAYeA,MATf,WACE,OACE,yBAAKC,UAAU,aACb,2BAAOC,YAAY,mCACnB,4BAAQD,UAAU,gBAAlB,YCkCSE,G,wBArCb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBAJF,E,4EAQjB,OAAIE,KAAKJ,MAAMK,UACN,4BAAQR,UAAU,eAAeS,QAASF,KAAKD,aAA/C,KAEA,4BAAQN,UAAU,eAAeS,QAASF,KAAKH,UAA/C,O,iCAMTG,KAAKJ,MAAMO,MAAMH,KAAKJ,MAAMQ,S,oCAI5BJ,KAAKJ,MAAMS,SAASL,KAAKJ,MAAMQ,S,+BAI/B,OACE,yBAAKX,UAAU,SACb,yBAAKA,UAAU,qBACb,4BAAKO,KAAKJ,MAAMQ,MAAME,MACtB,2BAAIN,KAAKJ,MAAMQ,MAAMG,OAArB,MAAgCP,KAAKJ,MAAMQ,MAAMI,QAElDR,KAAKS,oB,GAhCMC,IAAMC,YCqBXC,E,iLAnBH,IAAD,OACP,OACE,yBAAKnB,UAAU,aAEXO,KAAKJ,MAAMiB,OAAOC,KAAI,SAAAV,GACpB,OAAO,kBAAC,EAAD,CACLA,MAAOA,EACPW,IAAKX,EAAMY,GACXb,MAAO,EAAKP,MAAMO,MAClBE,SAAU,EAAKT,MAAMS,SACrBJ,UAAW,EAAKL,MAAMK,oB,GAXZS,IAAMC,WCefM,G,uLAbX,OACE,yBAAKxB,UAAU,iBACb,uCACA,kBAAC,EAAD,CACEoB,OAAQb,KAAKJ,MAAMsB,cACnBf,MAAOH,KAAKJ,MAAMO,MAClBF,WAAW,S,GAROS,IAAMC,YC8BnBQ,G,kBA7Bb,WAAYvB,GAAQ,IAAD,8BACjB,4CAAMA,KACDwB,iBAAmB,EAAKA,iBAAiBtB,KAAtB,gBAFP,E,8EAKFuB,GACfrB,KAAKJ,MAAM0B,aAAaD,EAAME,OAAOC,OAErCH,EAAMI,mB,+BAIN,OACE,yBAAKhC,UAAU,YACb,2BACEiC,aAAc,eACdC,SAAU3B,KAAKoB,mBAEjB,kBAAC,EAAD,CACEP,OAAQb,KAAKJ,MAAMgC,eACnBvB,SAAUL,KAAKJ,MAAMS,SACrBJ,WAAW,IAEb,4BAAQR,UAAU,iBAAlB,wB,GAxBeiB,IAAMC,YCsEdkB,E,YAnEb,WAAYjC,GAAQ,IAAD,8BACjB,4CAAMA,KAEDkC,MAAQ,CACXZ,cAAe,CACb,CAACZ,KAAM,QAASC,OAAQ,UAAWC,MAAO,SAAUQ,GAAI,GACxD,CAACV,KAAM,QAASC,OAAQ,UAAWC,MAAO,SAAUQ,GAAI,GACxD,CAACV,KAAM,QAASC,OAAQ,UAAWC,MAAO,SAAUQ,GAAI,IAE1De,aAAc,mBACdH,eAAgB,CACd,CAACtB,KAAM,gBAAiBC,OAAQ,kBAAmBC,MAAO,iBAAkBQ,GAAI,GAChF,CAACV,KAAM,gBAAiBC,OAAQ,kBAAmBC,MAAO,iBAAkBQ,GAAI,GAChF,CAACV,KAAM,gBAAiBC,OAAQ,kBAAmBC,MAAO,iBAAkBQ,GAAI,KAIpF,EAAKnB,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBACnB,EAAKkC,mBAAqB,EAAKA,mBAAmBlC,KAAxB,gBAnBT,E,sEAsBVM,GACP,IAAIS,EAASb,KAAK8B,MAAMF,eACpBf,EAAOoB,MAAK,SAAAC,GAAU,OAAIA,EAAWlB,KAAOZ,EAAMY,QAItDH,EAAOsB,KAAK/B,GACZJ,KAAKoC,SAAS,CAAER,eAAgBf,O,kCAGtBT,GACV,IAAIS,EAASb,KAAK8B,MAAMF,eACxBf,EAASA,EAAOwB,QAAO,SAAAC,GAAY,OAAIA,EAAatB,KAAOZ,EAAMY,MAEjEhB,KAAKoC,SAAS,CAAER,eAAgBf,M,yCAGfP,GACjBN,KAAKoC,SAASpC,KAAKgC,mBAAmB1B,M,+BAItC,OACE,6BACE,iCAAM,0BAAMb,UAAU,aAAhB,OAAN,OACA,yBAAKA,UAAU,OACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CACEyB,cAAelB,KAAK8B,MAAMZ,cAC1Bf,MAAOH,KAAKH,WAEd,kBAAC,EAAD,CACEkC,aAAc/B,KAAK8B,MAAMC,aACzBH,eAAgB5B,KAAK8B,MAAMF,eAC3BvB,SAAUL,KAAKD,YACfuB,aAActB,KAAKgC,4B,GA3DftB,IAAMC,WCMJ4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.dba5d9fa.chunk.js","sourcesContent":["import React from 'react';\nimport './SearchBar.css';\n\nfunction SearchBar() {\n  return (\n    <div className=\"SearchBar\">\n      <input placeholder=\"Enter A Song, Album, or Artist\"/>\n      <button className=\"SearchButton\">SEARCH</button>\n    </div>\n  );\n}\n\nexport default SearchBar;\n","import React from 'react';\nimport './Track.css';\n\nclass Track extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n  };\n\n  renderAction() {\n    if (this.props.isRemoval){\n      return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>\n    } else {\n      return <button className=\"Track-action\" onClick={this.addTrack}>+</button>\n    }\n\n  };\n\n  addTrack() {\n    this.props.onAdd(this.props.track);\n  };\n\n  removeTrack() {\n    this.props.onRemove(this.props.track);\n  }\n\n  render() {\n    return (\n      <div className=\"Track\">\n        <div className=\"Track-information\">\n          <h3>{this.props.track.name}</h3>\n          <p>{this.props.track.artist} | {this.props.track.album}</p>\n        </div>\n        {this.renderAction()}\n      </div>\n    );\n  };\n};\n\nexport default Track;","import React from 'react';\nimport './TrackList.css';\nimport Track from \"../Track/Track\";\n\nclass TrackList extends React.Component {\n  render() {\n    return (\n      <div className=\"TrackList\">\n        {\n          this.props.tracks.map(track => {\n            return <Track\n              track={track}\n              key={track.id}\n              onAdd={this.props.onAdd}\n              onRemove={this.props.onRemove}\n              isRemoval={this.props.isRemoval}\n            />\n          })\n        }\n      </div>\n    );\n  }\n}\n\nexport default TrackList;","import React from 'react';\nimport TrackList from '../TrackList/TrackList';\nimport './SearchResults.css';\n\nclass SearchResults extends React.Component {\n  render(){\n    return (\n      <div className=\"SearchResults\">\n        <h2>Results</h2>\n        <TrackList\n          tracks={this.props.searchResults}\n          onAdd={this.props.onAdd}\n          isRemoval={false}\n        />\n      </div>\n    );\n  }\n}\n\nexport default SearchResults;\n","import React from 'react';\nimport TrackList from '../TrackList/TrackList';\nimport './PlayList.css';\n\nclass PlayList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleNameChange = this.handleNameChange.bind(this);\n  }\n\n  handleNameChange(event) {\n    this.props.onNameChange(event.target.value);\n    // test later. atm it's breaking when edited. (not good)\n    event.preventDefault();\n  };\n\n  render() {\n    return (\n      <div className=\"Playlist\">\n        <input\n          defaultValue={'New Playlist'}\n          onChange={this.handleNameChange}\n        />\n        <TrackList\n          tracks={this.props.playlistTracks}\n          onRemove={this.props.onRemove}\n          isRemoval={true}\n        />\n        <button className=\"Playlist-save\">SAVE TO SPOTIFY</button>\n      </div>\n    );\n  }\n}\n\nexport default PlayList;\n","import React from 'react';\nimport './App.css';\nimport SearchBar from \"../SearchBar/SearchBar\";\nimport SearchResults from \"../SearchResults/SearchResults\";\nimport PlayList from \"../PlayList/PlayList\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      searchResults: [\n        {name: 'name1', artist: 'artist1', album: 'album1', id: 1},\n        {name: 'name2', artist: 'artist2', album: 'album2', id: 2},\n        {name: 'name3', artist: 'artist3', album: 'album3', id: 3}\n      ],\n      playlistName: 'my awesome songs',\n      playlistTracks: [\n        {name: 'playlistName1', artist: 'playlistArtist1', album: 'playlistAlbum1', id: 4},\n        {name: 'playlistName2', artist: 'playlistArtist2', album: 'playlistAlbum2', id: 5},\n        {name: 'playlistName3', artist: 'playlistArtist3', album: 'playlistAlbum3', id: 6}\n      ]\n    }\n\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n  };\n\n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n    if (tracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    }\n\n    tracks.push(track);\n    this.setState({ playlistTracks: tracks });\n  };\n\n  removeTrack(track){\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n\n    this.setState({ playlistTracks: tracks });\n  };\n\n  updatePlaylistName(name) {\n    this.setState(this.updatePlaylistName(name));\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar />\n          <div className=\"App-playlist\">\n            <SearchResults\n              searchResults={this.state.searchResults}\n              onAdd={this.addTrack}\n             />\n            <PlayList\n              playlistName={this.state.playlistName}\n              playlistTracks={this.state.playlistTracks}\n              onRemove={this.removeTrack}\n              onNameChange={this.updatePlaylistName}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  };\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}